import os
import telebot
import pyodbc
from datetime import datetime
from dotenv import load_dotenv
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MANAGER_TELEGRAM_ID = int(os.getenv("MANAGER_TELEGRAM_ID"))
MSSQL_SERVER = os.getenv("MSSQL_SERVER")
MSSQL_DATABASE = os.getenv("MSSQL_DATABASE")
MSSQL_USERNAME = os.getenv("MSSQL_USERNAME")
MSSQL_PASSWORD = os.getenv("MSSQL_PASSWORD")

conn_str = (
    f"DRIVER={{ODBC Driver 17 for SQL Server}};"
    f"SERVER={MSSQL_SERVER};"
    f"DATABASE={MSSQL_DATABASE};"
    f"UID={MSSQL_USERNAME};"
    f"PWD={MSSQL_PASSWORD}"
)
conn = pyodbc.connect(conn_str)
cursor = conn.cursor()

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

pending_requests = {}
user_last_product_code = {}

def is_allowed_user(telegram_id):
    cursor.execute("SELECT COUNT(*) FROM tbl_Telegram_ID_Goods_OPT_bot WHERE Telegram_ID = ?", telegram_id)
    return cursor.fetchone()[0] > 0

def get_product_info(code):
    cursor.execute("exec qry_goods_opt_bot ?", code)
    row = cursor.fetchone()
    if row:
        return {
            "–ö–æ–¥": row[0],
            "–ù–∞–∑–≤–∞–Ω–∏–µ": row[1],
            "–¶–µ–Ω–∞": row[2],
            "Brand_ID": row[3],
            "–§–æ—Ç–æ": row[4]
        }
    return None

def is_sensitive_brand(brand_id):
    cursor.execute("SELECT Flag FROM tbl_Brand_Goods_OPT_bot WHERE Brand_ID = ?", brand_id)
    row = cursor.fetchone()
    return row and row[0] == 1

def get_interest_info(code):
    cursor.execute("exec qry_g_id_interesting_shops ?", code)
    return cursor.fetchall()

def get_zalog_info(code):
    cursor.execute("exec qry_goods_zalog_bot ?", code)
    return cursor.fetchall()

@bot.message_handler(commands=['start'])
def welcome(message):
    if is_allowed_user(message.from_user.id):
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–¥ —Ç–æ–≤–∞—Ä—É:")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")

@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_product_request(message):
    telegram_id = message.from_user.id
    code = int(message.text)

    if not is_allowed_user(telegram_id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    product = get_product_info(code)
    if not product:
        bot.reply_to(message, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    caption = (
        f"\U0001F4E6 –ö–æ–¥: {product['–ö–æ–¥']}\n"
        f"\U0001F4DB –ù–∞–∑–≤–∞: {product['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"\U0001F4B0 –¶—ñ–Ω–∞: {product['–¶–µ–Ω–∞']} –≥—Ä–Ω"
    )
    bot.send_photo(chat_id=telegram_id, photo=product['–§–æ—Ç–æ'], caption=caption)

    user_last_product_code[telegram_id] = code

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="üì© –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä", callback_data="request_product"),
        InlineKeyboardButton(text="üîÑ –í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–æ–≤–∞—Ä", callback_data="change_product")
    )
    bot.send_message(chat_id=telegram_id, text="–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "request_product")
def handle_request_product(call):
    telegram_id = call.from_user.id
    code = user_last_product_code.get(telegram_id)
    if not code:
        bot.send_message(telegram_id, "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä, –±—É–¥—å –ª–∞—Å–∫–∞.")
        return

    product = get_product_info(code)
    if not product:
        bot.send_message(telegram_id, "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if not is_sensitive_brand(product["Brand_ID"]):
        bot.send_message(telegram_id, "–í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è, –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        bot.send_message(telegram_id, "üõç –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–Ω—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return

    interest_rows = get_interest_info(code)
    zalog_rows = get_zalog_info(code)

    if not interest_rows and not zalog_rows:
        bot.send_message(telegram_id, "–í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è, –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        bot.send_message(telegram_id, "üõç –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–Ω—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")
        return

    full_text = (
        f"\U0001F514 –ö–ª—ñ—î–Ω—Ç –∑–∞—Ü—ñ–∫–∞–≤–∏–≤—Å—è —Ç–æ–≤–∞—Ä–æ–º:\n"
        f"–ö–æ–¥: {product['–ö–æ–¥']}\n"
        f"–ù–∞–∑–≤–∞: {product['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"–¶—ñ–Ω–∞: {product['–¶–µ–Ω–∞']} –≥—Ä–Ω\n"
    )

    if interest_rows:
        full_text += "\n\U0001F575Ô∏è –¶–∏–º —Ç–æ–≤–∞—Ä–æ–º –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å —Ü—ñ–∫–∞–≤–∏–ª–∏—Å—è:\n"
        for row in interest_rows:
            date = row[0].strftime("%d.%m.%Y")
            full_text += f"- {date} ‚Ä¢ {row[1]} ‚Ä¢ {row[2]} ‚Ä¢ {row[3]}\n"

    if zalog_rows:
        full_text += "\n\U0001F4BC –¢–æ–≤–∞—Ä –∑–∞—Ä–∞–∑ —É –∑–∞—Å—Ç–∞–≤—ñ:\n"
        for row in zalog_rows:
            on_date = row[1].strftime("%d.%m.%Y %H:%M")
            full_text += f"- {row[0]} ‚Ä¢ {on_date} ‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä: {row[3]} ‚Ä¢ –¢–µ–ª: {row[4]}\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{telegram_id}"),
        InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{telegram_id}")
    )
    bot.send_message(chat_id=MANAGER_TELEGRAM_ID, text=full_text, reply_markup=keyboard)
    bot.send_message(telegram_id, "–í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    pending_requests[telegram_id] = code

@bot.callback_query_handler(func=lambda call: call.data == "change_product")
def handle_change_product(call):
    bot.send_message(call.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–Ω—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É:")

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve") or call.data.startswith("reject"))
def handle_decision(call):
    action, user_id_str = call.data.split(":")
    user_id = int(user_id_str)

    if action == "approve":
        bot.send_message(user_id, "–í–∞—à –∑–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    elif action == "reject":
        bot.send_message(user_id, "–í–∞—à –∑–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ç–æ–≤–∞—Ä –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
    bot.send_message(user_id, "üõç –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —ñ–Ω—à–æ–≥–æ —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É.")

bot.polling(none_stop=True)
